# Generated by Django 5.2.5 on 2025-10-07 08:38

from typing import Any, ClassVar

import django.db.models.deletion
from django.db import migrations, models


def migrate_blood_test_approved_files(apps: object, _schema_editor: object) -> None:
    """
    Migrate existing BloodTestRequest.approved_files relationships to use ApprovedFile through table.
    """
    BloodTestRequest = apps.get_model("student_groups", "BloodTestRequest")
    ApprovedFile = apps.get_model("student_groups", "ApprovedFile")

    # Get the through model for the old M2M relationship
    through_model = BloodTestRequest.approved_files.through

    # Migrate all existing relationships
    for relationship in through_model.objects.all():
        ApprovedFile.objects.create(
            blood_test_request_id=relationship.bloodtestrequest_id,
            file_id=relationship.file_id,
            page_range=None,  # No page range for existing blood test files
        )


def reverse_migration(apps: object, _schema_editor: object) -> None:
    """
    Reverse the migration by moving ApprovedFile records back to direct M2M.
    """
    BloodTestRequest = apps.get_model("student_groups", "BloodTestRequest")
    ApprovedFile = apps.get_model("student_groups", "ApprovedFile")

    # Get the through model
    through_model = BloodTestRequest.approved_files.through

    # Move ApprovedFile records back to direct M2M
    for approved_file in ApprovedFile.objects.filter(blood_test_request__isnull=False):
        through_model.objects.get_or_create(
            bloodtestrequest_id=approved_file.blood_test_request_id,
            file_id=approved_file.file_id,
        )
        # Delete the ApprovedFile record
        approved_file.delete()


class Migration(migrations.Migration):
    dependencies: ClassVar[list[Any]] = [
        ("patients", "0004_file_category"),
        ("student_groups", "0007_note_role_bloodtestrequest_dischargesummary_and_more"),
    ]

    operations: ClassVar[list[Any]] = [
        # Step 1: Remove unique_together constraint from ApprovedFile
        migrations.AlterUniqueTogether(
            name="approvedfile",
            unique_together=set(),
        ),
        # Step 2: Add blood_test_request field to ApprovedFile (nullable for now)
        migrations.AddField(
            model_name="approvedfile",
            name="blood_test_request",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="approved_files_through",
                to="student_groups.bloodtestrequest",
            ),
        ),
        # Step 3: Make imaging_request nullable
        migrations.AlterField(
            model_name="approvedfile",
            name="imaging_request",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="approved_files_through",
                to="student_groups.imagingrequest",
            ),
        ),
        # Step 4: Migrate existing BloodTestRequest.approved_files data
        migrations.RunPython(
            migrate_blood_test_approved_files,
            reverse_migration,
        ),
        # Step 5: Remove the old M2M field from BloodTestRequest
        migrations.RemoveField(
            model_name="bloodtestrequest",
            name="approved_files",
        ),
        # Step 6: Add the new M2M field with through table
        migrations.AddField(
            model_name="bloodtestrequest",
            name="approved_files",
            field=models.ManyToManyField(
                related_name="blood_test_requests",
                through="student_groups.ApprovedFile",
                to="patients.file",
                verbose_name="Approved Files",
            ),
        ),
        # Step 7: Add constraint to ensure only one request type per ApprovedFile
        migrations.AddConstraint(
            model_name="approvedfile",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        ("imaging_request__isnull", False),
                        ("blood_test_request__isnull", True),
                    ),
                    models.Q(
                        ("imaging_request__isnull", True),
                        ("blood_test_request__isnull", False),
                    ),
                    _connector="OR",
                ),
                name="approved_file_single_request_type",
            ),
        ),
    ]
